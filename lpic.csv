front,back
1章,TODO
シェルが扱う2種類の変数は何か,"- シェル変数：設定されたシェルだけが使用する変数。子プロセスには引き継がれない
- 環境変数：設定されたシェルとそのシェルで起動したプログラムが使用する変数。子プロセスに引き継がれる。シェル変数をエクスポート宣言することで作成する"
【ノート】シェルについて,"- シェルはLinuxでOSとユーザの仲立ちをするインタフェース
- ユーザが入力したコマンドを解釈して実行するインタプリタで、ユーザはシェルを通じてOSを扱うことができる"
シェル変数の一覧を表示するにはどうするか,"setコマンドを引数無しで実行する

```
$ set | tail
SSH_CONNECTION='10.0.2.2 49282 10.0.2.15 22'
SSH_TTY=/dev/pts/0
TERM=screen-256color
TEST=test
UID=1000
USER=vagrant
XDG_RUNTIME_DIR=/run/user/1000
XDG_SESSION_ID=2
```"
シェル変数はどのようにして定義するか,"「シェル変数名=値」

```
$ MYNAME=foo
```"
シェル変数の値はどのようにして参照するか,"「$シェル変数名」または「${シェル変数名}」とする

```
$ echo $MYNAME
foo
$ echo ${MYNAME}
foo
```"
シェル変数はどのようにして削除するか,"unsetコマンドを使う

```
$ echo $MYNAME
foo
$ unset MYNAME
$ echo $MYNAME

```"
exportコマンドは何をするか,シェル変数を環境変数に設定し、シェルから起動するアプリケーションが参照できるようにする
daclareコマンドは何をするか,シェル内の変数・関数の表示や環境変数のエクスポートをする
bashのシェル変数PS1は何か,プロンプトの定義をする変数
【ノート】bashのプロンプト定義に使える表記,"- \s：シェルの名前
- \v：bashのバージョン
- \u：ユーザ名
- \h：ホスト名
- \w：現在の作業ディレクトリ"
2次プロンプトとは何か,"まだコマンドラインが完了していない、継続行のこと

```
$ echo 'aiu
> eo'
```"
「cd ~foo」を実行するとどうなるか,ユーザfooのホームディレクトリへ移動する
date +%Mコマンドを実行するとどうなるか,"日時の分のみが表示される
※ dateコマンドは実行時に+記号に続けて表示フォーマットを指定できる "
【ノート】dateコマンドの主な指定文字,"- %Y：年
- %m：月（01 ~ 12）
- %B：月（Januaryなど）
- %d：日
- %A：曜日（例：Tuesday）
- %H：時（0 ~ 23）
- %M：分（0 ~ 59）
- %S：秒（0 ~ 60）
- %s：UNIXTIME
"
manコマンドが実行時に参照するドキュメントファイルの置き場はどこか,"次の2つ

- `/usr/share/man`：ディストリビューションに含まれるパッケージをインストールした場合はこちらに
- `/usr/local/share/man`：ディストリビューションに含まれないパッケージをインストールした場合はこちらに"
履歴番号100のコマンドを消去するコマンドは何か,"historyコマンドのdオプションを使う

```
$ history -d 100
```"
履歴番号100のコマンドを実行するコマンドは何か,"!マークに続けて履歴番号を入力して実行する

```
$ !100
```"
指定した文字列から始まる直近のコマンドを実行するコマンドは何か,"```
$ !l
ls
bin fileA fileB
```"
直前に実行したコマンドを実行するコマンドは何か,"```
$ !!
```"
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
2章,TODO
3章,TODO
4章,TODO
5章,TODO
[ox] ユーザは必ず1つ以上のグループに所属する,正しい
グループには2種類あるが、それは何か,"- 1次グループ：必須。ログイン直後の作業グループ。ファイルやディレクトリを作成した際に、それを所有するグループとして使われる。
- 2次グループ：必要に応じて割り当てられる、1次グループ以外のグループ。複数割り当てることができる"
[command] groupsコマンドは何をするか,"自分または指定したユーザの所属グループを表示する

```
$ groups
vagrant

# ユーザ名を指定することも可能
$ sudo groups sshd
sshd : sshd
```"
[command] idコマンドは何をするか,"自分がどのユーザでログインしているのか、またどのグループに所属しているのかを表示する

```
$ id
uid=1000(vagrant) gid=1000(vagrant) groups=1000(vagrant) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
```"
ファイルまたはディレクトリのパーミッションを確認したい。どうすればいいか？,"ls -lでパーミッション、ファイルの所有者、所有するグループを表示できる

```
# ls -l <file/directory>

$ ls -l fileA
-rw-rw-r--. 1 vagrant vagrant 18 Jan  3 14:27 fileA
```"
ls -lコマンドでファイル・ディレクトリのパーミッションを確認できるが、どのような構成で表示されるか,"以下4つの情報を含む

- ファイルの種類
- ユーザ（所有者）に対するパーミッション
- グループに対するパーミッション
- その他のユーザに対するパーミッション

```
# 例
-rw-rw-r--
```"
【ノート】パーミッション情報に含まれる「ファイルの種類」とその記号,"- `-`：通常ファイル
- `d`：ディレクトリ
- `l`：シンボリックリンク

```
$ ls -l
drwxrwxr-x. 2 vagrant vagrant    33 Aug  3 16:41 bin
-rw-rw-r--. 1 vagrant vagrant    18 Jan  3 14:27 fileA
```"
「-rw-rw-r--」はどういう意味か,通常ファイルであり、所有者と所有グループは読み書き可能で、その他のユーザは読み取りのみ可能である
[ox] パーミッションを表す「r」「w」「x」はファイルかディレクトリで意味が異なる,正しい。ファイルかディレクトリかで意味が変わる
読み取り権限を示す「r」がディレクトリについている場合、どういう意味になるか,ディレクトリの内容を表示することができることを示す。lsなどが実行できる。
書き込み権限を示す「w」がディレクトリについている場合、どういう意味になるか,ディレクトリ内のファイルやディレクトリを作成・削除できることを示す。mkdir、touch、rmなどを実行できる。
実行権限を示す「x」がディレクトリについている場合、どういう意味になるか,ディレクトリへ移動することができることを示す。cdなどを実行できる。
/etc/passwdのパーミッションは何か,"```
-rw-r--r-- root root /etc/passwd
```"
chmodコマンドに指定できるモードは2種類あるが、それは何か,"- シンボリックモード：文字や記号を用いてパーミッションを操作する
- オクタルモード：8進数の数値を使ってパーミッションを操作する

```
# シンボリックモードの例
$ chmod a+x,g-w sample.txt

# オクタルモードの例
$ chmod 755 sample.txt
```"
【ノート】chmodのシンボリックモードは「chmod <user> <operation> <permission>」の形で指定するが、<operation>として次の3つの記号がある,"- +：許可を与える
- -：許可を削除する
- =：許可を設定する"
【ノート】chmodのオクタルモードでの数値の意味,"- 4：読み取り権限
- 2：書き込み権限
- 1：実行権限
- 0：権限なし"
umask値が022の場合、ファイルを新規に作成した際のパーミッションはどうなるか,644になる
ユーザのデフォルトパーミッションは何で決められているか,"シェルに設定されたumask値で決まる。umaskコマンドで現在の値を確認できる

```
$ umask
0002
```"
作成されるファイルのパーミッションはどのようにして決まるか,ファイルを作成するアプリケーションによって指定されたパーミッションと、プロセスごとにカーネル内に保持されているumask値との論理積になる
umask値とは何か,アプリケーションによって指定されたパーミッションに対し、「ユーザ」、「グループ」、「その他」毎に割り当てたくないパーミッションを指定した値
umask値はどのようにして変更するか,"umaskコマンドを使う

```
# 例：umask値を027にする
$ umask 027
```"
【ノート】umask値から作成されるファイルパーミッションを求める方法,"- 通常、全てを許可するパーミッションでファイル・ディレクトリは作成される
  - ファイル：666
  - ディレクトリ：777
- 上記のパーミッションからumask値に指定された値を引く
- 例：umask値が002の場合にファイルを作成すると、666から002を引いて664となる
- 例：umask値が002の場合にディレクトリを作成すると、777から002を引いて775となる"
,
[command] set,TODO
[command] env,TODO
[command] printenv,TODO
[command] declare,TODO
[command] date,TODO
[command] man,TODO
[command] history,TODO
[command] su,TODO
[command] mkdir,TODO
[command] mv,TODO
[command] cp,TODO
[command] lsattr,TODO
[command] chattr,TODO
[command] ls,TODO
[command] rm,TODO
[command] tar,TODO
[command] cpio,TODO
[command] dd,TODO
[command] gzip,TODO
[command] gunzip,TODO
[command] bzip2,TODO
[command] bunzip2,TODO
[command] touch,TODO
[command] more,TODO
[command] less,TODO
[command] cat,TODO
[command] nl,TODO
[command] tac,TODO
[command] grep,TODO
[command] xargs,TODO
[command] find,TODO
[command] tr,TODO
[command] od,TODO
[command] iconv,TODO
[command] sed,TODO
[command] cut,TODO
[command] wc,TODO
[command] expand,TODO
[command] unexpand,TODO
[command] fmt,TODO
[command] pr,TODO
[command] split,TODO
[command] egrep,TODO
[command] fgrep,TODO
[command] ps,TODO
[command] pstree,TODO
[command] top,TODO
[command] nice,TODO
[command] renice,TODO
[command] jobs,TODO
[command] fg,TODO
[command] bg,TODO
[command] nohup,TODO
[command] kill,TODO
[command] killall,TODO
[command] fdisk,TODO
[command] gdisk,TODO
[command] parted,TODO
[command] gparted,TODO
[command] mkfs,TODO
[command] mke2fs,TODO
[command] xfs_info,TODO
[command] xfs_metadump,TODO
[command] xfs_freeze,TODO
[command] mkswap,TODO
[command] swapon,TODO
[command] swapoff,TODO
[command] df,TODO
[command] du,TODO
